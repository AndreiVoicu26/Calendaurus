We have 4 big areas/domains:
- Discipline
- Events
- Identity
- Personas

-For the Identity, we have only the User with its properties

-For the Personas we have 3 Personas with their properties (Professor,Student,SysAdmin). Each persona is a 1:1 relationship with an user

-For the Discipline we have 3 main entitiesL: 
	1. The discipline itself with properties describing a discipline as a whole
	2. The TheoreticalLesson which is a 1:1 relationship with a discipline because you can only have one course per discipline
	3. The PracticalLesson which is a n:1 relationship with the Discipline because you can have multiple per discipline (a seminar, lab, practical session,etc). See the combination of FK_PracticalLesson_Discipline and UK_PracticalLesson_DisciplineIdType which is making sure of the integrity

-For the Events which are actually the entry you would see in the calendar we have 2 main splits:
	1. The event itself. Here we have 2 items actually. One for the theoretical events and one for practical events
		a. TheoreticalLessonEvent is the course event. This has a n:1 relationship with the actual theoretical lesson but also n:1 relationship with the professor. This is because a professor can teach multiple Theoretical lessons but also because we wanted to leave the ability for the theoretical lesson to be held by 2 different professors in the 2 different events. This is more common with Practical lesson events but did not want to complicate this.
		b. PracticalLessonEvent is the practical lesson in reality and the structure is siimlar as the theoretical one.
	Each entry in one of the above tables would actually represent an event in the calendar. More constraints can be applied if needed based on the business logic

	2. There are 2 more link tables PracticalLessonEvent_Student_Attendance and TheoreticalLessonEvent_Student_Attendance. These tables are n:n link tables between the event and a student. Because a student can attend multiple events but also an event can be attended by multiple students. This table should contain a record each time a student is subscribing to an event. Of course due to the composed primary key a student will not be able to subscribe twice to the same event BUT nothing restricts from the database layer that a student does not attend multiple practical lesson events from the same practical lesson. You can decide to add this only on the business logic layer of your API and not in the database or also create a more complex check constraint as well.